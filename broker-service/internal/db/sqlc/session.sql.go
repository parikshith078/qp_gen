// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCsrfToken = `-- name: CreateCsrfToken :one
INSERT INTO csrf_tokens (
  session_id, token, expires_at, created_at
) VALUES (
  $1, $2, $3, NOW() 
)
RETURNING id, session_id, token, expires_at, created_at
`

type CreateCsrfTokenParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateCsrfToken(ctx context.Context, arg CreateCsrfTokenParams) (CsrfToken, error) {
	row := q.db.QueryRow(ctx, createCsrfToken, arg.SessionID, arg.Token, arg.ExpiresAt)
	var i CsrfToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createSessionToken = `-- name: CreateSessionToken :one
INSERT INTO session_tokens (
  user_id, token, expires_at, created_at
) VALUES (
  $1, $2, $3, NOW() 
)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateSessionTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSessionToken(ctx context.Context, arg CreateSessionTokenParams) (SessionToken, error) {
	row := q.db.QueryRow(ctx, createSessionToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i SessionToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCsrfTokenBySessionID = `-- name: GetCsrfTokenBySessionID :one
SELECT id, session_id, token, expires_at, created_at FROM csrf_tokens
WHERE session_id = $1
`

func (q *Queries) GetCsrfTokenBySessionID(ctx context.Context, sessionID uuid.UUID) (CsrfToken, error) {
	row := q.db.QueryRow(ctx, getCsrfTokenBySessionID, sessionID)
	var i CsrfToken
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionTokenByToken = `-- name: GetSessionTokenByToken :one
SELECT id, user_id, token, expires_at, created_at FROM session_tokens
WHERE token = $1
`

func (q *Queries) GetSessionTokenByToken(ctx context.Context, token string) (SessionToken, error) {
	row := q.db.QueryRow(ctx, getSessionTokenByToken, token)
	var i SessionToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
